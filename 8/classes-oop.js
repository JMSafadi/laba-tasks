// Class desing
const { v4: uuidv4 } = require('uuid')

// Book class to create each object that will be avaiable in the bookstore.
// Properties are title, author, isbn, price and availability of the book.
// Applying OOP encapsulation doing private properties by convension.
class Book {
  constructor(title, author, isbn, price, availability) {
    this._title = title;
    this._author = author;
    this._isbn = isbn;
    this._price = price;
    this._availability = availability
  }
}

// User class to create each object that will represent the users in bookstore.
// Properties are name, email and userId unique generated by uuid package.
// Applying OOP encapsulation doing private properties by convension.
class User {
  constructor(name, email) {
    this._name = name;
    this._email = email;
    this._userId = uuidv4()
  }
}

// Cart class to create each object that will represent the shopping cart.
// Properties are user (that is buying) and an array of books choosed.
// Method addBooks() is going to add any amount of books provided by arguments.
// Method removeBooks() is going to delete any amount of books provided by arguments of the array books.
// Method calculateTotalPrice() use reduce to add all the prices and return the total of the books in cart.
// Method searchBookByTitle recibes titles and loop into the Cart's books. Returns different message depending if they are available or not
// Applying encapsulation making private properties by convention and creating methods to data managment, instead of modifying them fron other parts of the code, making the code more secure.
class Cart {
  constructor(user) {
    this._user = user
    this._books = []
  }
  addBooks(...books) {
    this._books.push(...books)
  }
  removeBooks(...books) {
    this._books = this._books.filter(book => !books.includes(book))
  }
  calculateTotalPrice() {
    const total = this._books.reduce((acc, book) => acc + book._price, 0).toFixed(2)
    return `$${total}`
  }
  searchBooksByTitle(...title) {
    const availablesBooks = []
    const nonAvailablesBooks = []

    title.forEach(title => {
      const foundBook =  this._books.find(book => book._title.toLowerCase().includes(title.toLowerCase()))
      if (foundBook) {
        availablesBooks.push(foundBook._title)
      } else {
        nonAvailablesBooks.push(title)
      }
    })
    let message = ''
    if (availablesBooks.length > 1) {
      message += `The books '${availablesBooks.join("' , '")}' are availables. `
    } else if (availablesBooks.length === 1){
      message += `The book '${availablesBooks.join("' , '")}' is available. `
    }

    if (nonAvailablesBooks.length === 1) {
      message += `The book '${nonAvailablesBooks.join("' ,'")}' is not available. `
    } else if (nonAvailablesBooks.length > 1) {
      message += `The books '${nonAvailablesBooks.join("' ,'")}' are not availables. `
    }
    console.log(message)
    return message
  }
}

// Order class to create each object that will represent a purcharse order from user.
// This class applies inheritance concept using properties like user and calculateTotalPrice() with super() and extends from Cart class. Also, applying polymorphism, because we have a method behaving differently depending on the context.
class Order extends Cart {
  constructor(user, ...books) {
    super(user)
    this._books = books;
    this._total = this.calculateTotalPrice()
  }
  applyDiscount(discount) {
    const total = parseFloat(this._total.slice(1))
    const discountCalc = total * discount / 100
    this._total = `$${total - discountCalc.toFixed(2)}`
  }
}

// Implementation.
// Create objects instantiating classes.
const book1 = new Book('I Feel Bad About My Neck', 'Nora Ephron', 9789877256567, 17.99, true)
const book2 = new Book('Broken Glass', 'Alain Mabanckou', 6497518234671, 10.50, true)
const book3 = new Book('A Little Life', 'Hanya Yanagihara', 4629137649124, 25.00, true)
const book4 = new Book('Chronicles: Volume One', 'Bob Dylan', 6421359784312, 12.50, true)
const book5 = new Book('Light', 'M John Harrison', 3461275497141, 30.50, true)
const book6 = new Book('Visitation', 'Jenny Erpenbeck', 9875621546215, 28.00, true)
const book7 = new Book('Bad Blood', 'Lorna Sage', 7846512345951, 12.00, true)
const book8 = new Book('Priestdaddy', 'Patricia Lockwood', 1976482719365, 10.99, true)

const user1 = new User('Julian Safadi', 'julianmatiassafadi@gmail.com')
const user2 = new User('Gonzalo Barreiro', 'gonzalobarreiro@gmail.com')
const user3 = new User('Juan Ortega', 'juanortega@gmail.com')

const cartUser1 = new Cart(user1)
cartUser1.addBooks(book5, book3, book6)

const cartUser2 = new Cart(user2)
cartUser2.addBooks(book1)

const orderUser3 = new Order(user3, book7, book4)
orderUser3.calculateTotalPrice()


// Demonstration:
console.log('User2 and User1 adds three books to his cart, now he has four')
cartUser2.addBooks(book8, book7, book2)
console.log(cartUser2)

// Now he place an order, the class receives the user and the cart array of books going to be purchase.
console.log('Order placed')
const orderUser2 = new Order(user2, ...cartUser2._books)
console.log(orderUser2)

const orderUser1 = new Order(user1, ...cartUser1._books)
console.log(orderUser1)

// Calculate the total price
console.log('Total price for user 2 cart: ', cartUser2.calculateTotalPrice())
console.log('Total price for user 1 cart: ', orderUser1.calculateTotalPrice())

// Order can calculates the total with the same method than Cart
console.log(orderUser2._total) // $51.84
console.log(orderUser1._total) // $83.50


// Create new classes for different types of books using inheritance with extends.
class FictionBook extends Book {
  constructor(title, author, isbn, price, availability) {
    super(title, author, isbn, price, availability)
    this._type = 'Fiction'
  }
}

class NonFictionBook extends Book {
  constructor(title, author, isbn, price, availability) {
    super(title, author, isbn, price, availability)
    this._type = 'Non-Fiction'
  }
}

class Autobiographies extends Book {
  constructor(title, author, isbn, price, availability) {
    super(title, author, isbn, price, availability)
    this._type = 'Autobiographies'
  }
}

const book9 = new FictionBook('A Calamity of Souls', 'David Baldacci', 6451276421346, 15.00, true)
const book10 = new NonFictionBook('The Anxious Generation', 'Jonathan Haidt', 4579658120340, 28.50, true)
const book11 = new Autobiographies('The Anxious Generation', 'Jonathan Haidt', 5781649521060, 17.00, true)

// Use method addBooks from Cart to add more books created with de new types classes.
// This demostrate polymorphism, as the method addBooks() is used to add differentes types of books.
cartUser1.addBooks(book9, book10)
cartUser2.addBooks(book11)


// Bonus
// Searching books. Use same method searchBooksByTitle() in both Cart and Order classes.
cartUser2.searchBooksByTitle('I Feel Bad About My Neck', 'Priestdaddy', 'Visitation') // The books 'I Feel Bad About My Neck' , 'Priestdaddy' are availables. The book 'Visitation' is not available. 
orderUser2.searchBooksByTitle('Bad Blood') // The book 'Bad Blood' is available.

// Applying different discounts to different orders
orderUser2.applyDiscount(10)
orderUser1.applyDiscount(30)

console.log(orderUser2)
console.log(orderUser1)