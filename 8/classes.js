// Class desing
const { v4: uuidv4 } = require('uuid')

// Book class to create each object that will be avaiable in the bookstore.
// Properties are title, author, isbn, price and avaiability of the book.
// Applying OOP encapsulation doing private properties by convension.
class Book {
  constructor(title, author, isbn, price, avaiability) {
    this._title = title;
    this._author = author;
    this._isbn = isbn;
    this._price = price;
    this._avaiability = avaiability
  }
}

// User class to create each object that will represent the users in bookstore.
// Properties are name, email and userId unique generated by uuid package.
// Applying OOP encapsulation doing private properties by convension.
class User {
  constructor(name, email) {
    this._name = name;
    this._email = email;
    this._userId = uuidv4()
  }
}

// Cart class to create each object that will represent the shopping cart.
// Properties are user (that is buying) and an array of books choosed.
// Method addBooks() is going to add any amount of books provided by arguments.
// Method removeBooks() is going to delete any amount of books provided by arguments of the array books.
// Method calculateTotalPrice() use reduce to add all the prices and return the total of the books in cart.
// Applying encapsulation making private properties by convention and creating methods to data managment, instead of modifying them fron other parts of the code, making the code more secure.
class Cart {
  constructor(user) {
    this._user = user
    this._books = []
  }
  addBooks(...books) {
    this._books.push(...books)
  }
  removeBooks(...books) {
    this._books = this._books.filter(book => !books.includes(book))
  }
  calculateTotalPrice() {
    const total = this._books.reduce((acc, book) => acc + book._price, 0).toFixed(2)
    return `$${total}`
  }
}

// Order class to create each object that will represent a purcharse order from user.
// This class applies inheritance concept using properties like user and calculateTotalPrice() with super() and extends from Cart class. Also, applying polymorphism, because we have a method behaving differently depending on the context.
class Order extends Cart {
  constructor(user, ...books) {
    super(user)
    this._books = books;
    this._total = this.calculateTotalPrice()
  }
}

// Implementation.
// Create objects instantiating classes.
const book1 = new Book('I Feel Bad About My Neck', 'Nora Ephron', 9789877256567, 17.99, true)
const book2 = new Book('Broken Glass', 'Alain Mabanckou', 6497518234671, 10.50, true)
const book3 = new Book('A Little Life', 'Hanya Yanagihara', 4629137649124, 25.00, true)
const book4 = new Book('Chronicles: Volume One', 'Bob Dylan', 6421359784312, 12.50, true)
const book5 = new Book('Light', 'M John Harrison', 3461275497141, 30.50, true)
const book6 = new Book('Visitation', 'Jenny Erpenbeck', 9875621546215, 28.00, true)
const book7 = new Book('Bad Blood', 'Lorna Sage', 7846512345951, 12.00, true)
const book8 = new Book('Priestdaddy', 'Patricia Lockwood', 1976482719365, 10.99, true)

const user1 = new User('Julian Safadi', 'julianmatiassafadi@gmail.com')
const user2 = new User('Gonzalo Barreiro', 'gonzalobarreiro@gmail.com')
const user3 = new User('Juan Ortega', 'juanortega@gmail.com')

const cartUser1 = new Cart(user1)
cartUser1.addBooks(book5, book3, book6)

const cartUser2 = new Cart(user2)
cartUser2.addBooks(book1, book8, book2, book5)

const order1 = new Order(user3, book7, book4)

// Demonstration
